---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloud-controller-manager
  namespace: kube-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: openstack-cloud-controller-manager
  namespace: kube-system
  labels:
    k8s-app: openstack-cloud-controller-manager
spec:
  selector:
    matchLabels:
      k8s-app: openstack-cloud-controller-manager
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        k8s-app: openstack-cloud-controller-manager
    spec:
      priorityClassName: system-cluster-critical
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      securityContext:
        runAsUser: 1001
      tolerations:
      - key: node.cloudprovider.kubernetes.io/uninitialized
        value: "true"
        effect: NoSchedule
      - key: node-role.kubernetes.io/control-plane
        effect: NoSchedule
      - key: node.kubernetes.io/not-ready
        effect: NoSchedule
      - effect: NoExecute
        operator: Exists
      serviceAccountName: cloud-controller-manager
      imagePullSecrets:
        - name: local-registry-secret
      containers:
        - name: openstack-cloud-controller-manager
          image: {{ openstack_cloud_controller_manager_image }}
          args:
            - /bin/openstack-cloud-controller-manager
            - --v={{ openstack_ccm_log_level }}
            - --cloud-config=/etc/cloud/cloud-config
            - --cloud-provider=openstack
            - --use-service-account-credentials=true
            - --bind-address=::1
            - --tls-cert-file=/etc/tls-cert/tls.crt
            - --tls-private-key-file=/etc/tls-cert/tls.key
          volumeMounts:
            - mountPath: /var/run/kubernetes
              name: var-run-kubernetes
            - mountPath: /etc/kubernetes/pki
              name: k8s-certs
              readOnly: true
            - mountPath: /etc/ssl/certs
              name: ca-certs
              readOnly: true
            - mountPath: /etc/pki
              name: ca-os-certs
              readOnly: true
            - mountPath: /etc/cloud
              name: cloud-config-volume
              readOnly: true
            - mountPath: /etc/hosts
              name: etc-hosts
              readOnly: true
            - mountPath: /etc/tls-cert
              name: os-cloud-controller-manager-tls-volume
              readOnly: true
{% if openstack_ca_cert != "" %}
            - mountPath: "{{ openstack_ca_cert_path }}"
              name: os-cacert
              readOnly: true
{% endif %}
            - mountPath: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
              name: flexvolume-dir
              readOnly: true
          resources:
            requests:
              cpu: 200m
          env:
            - name: CLOUD_CONFIG
              value: /etc/cloud/cloud-config
      hostNetwork: true
      volumes:
      - emptyDir: {}
        name: var-run-kubernetes
      - hostPath:
          path: /etc/kubernetes/pki
          type: DirectoryOrCreate
        name: k8s-certs
      - hostPath:
          path: /etc/ssl/certs
          type: DirectoryOrCreate
        name: ca-certs
      - hostPath:
          path: /etc/pki
          type: DirectoryOrCreate
        name: ca-os-certs
      - hostPath:
          path: /etc/hosts
          type: File
        name: etc-hosts
      - name: os-cloud-controller-manager-tls-volume
        secret:
          defaultMode: 420
          secretName: openstack-cloud-controller-manager-tls
      - name: cloud-config-volume
        secret:
          secretName: openstack-cloud-config
{% if openstack_ca_cert != "" %}
      - name: os-cacert
        secret:
          secretName: openstack-ca-cert
{% endif %}
      - hostPath:
          path: /usr/libexec/kubernetes/kubelet-plugins/volume/exec
        name: flexvolume-dir
---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:cloud-controller-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:cloud-controller-manager
subjects:
- kind: ServiceAccount
  name: cloud-controller-manager
  namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:cloud-controller-manager
rules:
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - create
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts/token
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - create
  - get
- apiGroups:
  - ""
  resources:
  - persistentvolumes
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - endpoints
  verbs:
  - create
  - get
  - list
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - list
  - get
  - watch
---
