- assert:
    that:
      - cr_cred_secret_name is defined
      - cr_cred_custom_user_id is defined
      - cr_cred_custom_pw is defined

- name: Check for existing secret
  command: "{{ kubectl }} -n {{ credentials_secret_namespace }} get secret {{ cr_cred_secret_name }} -o yaml"
  register: get_secret
  failed_when: false
  changed_when: false
  retries: "{{ kubectl_retry_count }}"
  delay: "{{ kubectl_retry_delay }}"
  until: (get_secret.rc == 0 or "not found" in get_secret.stderr)

# Secret deletion required, when doing upgrade from CCD 2.6 to 2.7 due to
# changes in container registry secret
- name: Delete current secret
  command: "{{ kubectl }} delete secret --namespace {{ credentials_secret_namespace }} {{ cr_cred_secret_name }}"
  register: del_secret
  retries: "{{ kubectl_retry_count }}"
  delay: "{{ kubectl_retry_delay }}"
  until: (del_secret.rc == 0 or "not found" in del_secret.stderr)
  when: (get_secret.rc == 0 and "htpasswd" not in get_secret.stdout and "NotFound" not in get_secret.stderr)

- name: Check for existing secret
  command: "{{ kubectl }} -n {{ credentials_secret_namespace }} get secret {{ cr_cred_secret_name }} -o yaml"
  register: get_secret
  failed_when: false
  changed_when: false
  retries: "{{ kubectl_retry_count }}"
  delay: "{{ kubectl_retry_delay }}"
  until: (get_secret.rc == 0 or "not found" in get_secret.stderr)

- name: Generate custom credential password
  vars:
    pwd_alias: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters') }}"
  set_fact:
     cr_cred_custom_pw: "{{ pwd_alias }}"
  no_log: true
  when: (cr_cred_custom_pw == "" and (not image_based_deployment | default(false) | bool))

- name: Create http password with htpasswd
  command: "htpasswd -cBb htpasswd {{ cr_cred_custom_user_id }} {{ cr_cred_custom_pw }}"
  no_log: true
  when: (get_secret.rc != 0 and "NotFound" in get_secret.stderr)

- name: Create secret for credentials
  command: "{{ kubectl }} create secret --namespace {{ credentials_secret_namespace }} generic \
              {{ cr_cred_secret_name }} \
              --from-file=htpasswd=htpasswd"
  register: create_secret
  retries: "{{ kubectl_retry_count }}"
  delay: "{{ kubectl_retry_delay }}"
  until: create_secret.rc == 0
  when: (get_secret.rc != 0 and "NotFound" in get_secret.stderr)
