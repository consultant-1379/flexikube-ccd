---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: dex
  labels:
    app: dex
spec:
  replicas: {{ dex_replicas }}
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      priorityClassName: system-cluster-critical
      serviceAccountName: dex
      imagePullSecrets:
      - name: local-registry-secret
      containers:
      - image: {{ dex_image }}
        name: dex
{% if dex_cpu_req is defined and dex_mem_req is defined and dex_cpu_limit is defined and dex_mem_limit is defined %}
        resources:
          requests:
            cpu: {{ dex_cpu_req }}
            memory: {{ dex_mem_req }}
          limits:
            cpu: {{ dex_cpu_limit }}
            memory: {{ dex_mem_limit }}
{% endif %}
        command: ["/usr/local/bin/dex", "serve", "/etc/dex/cfg/config.yaml"]
        ports:
        - name: https
          containerPort: 5556
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - all
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10002
        env:
        - name: KUBERNETES_POD_NAMESPACE
          valueFrom:
           fieldRef:
             fieldPath: metadata.namespace
        volumeMounts:
        - name: tz-config
          mountPath: /etc/localtime
        - name: config
          mountPath: /etc/dex/cfg
{% if dex_issuer_url.startswith('https://') %}
        - name: tls
          mountPath: /etc/dex/tls
{% endif %}
{% if dex_ldap_ca is defined or dex_ldap_ca_data is defined %}
        - name: dex-ldap-ca
          mountPath: /etc/dex
{% endif %}
      volumes:
      - name: tz-config
        hostPath:
          path: /etc/localtime
      - name: config
        configMap:
          name: dex
          items:
          - key: config.yaml
            path: config.yaml
{% if dex_issuer_url.startswith('https://') %}
      - name: tls
        secret:
          secretName: dex-tls
{% endif %}
{% if dex_ldap_ca is defined or dex_ldap_ca_data is defined %}
      - name: dex-ldap-ca
        secret:
          secretName: dex-ldap-ca
{% endif %}
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: dex
data:
  config.yaml: |
    # The base path of dex and the external name of the OpenID Connect service.
    # This is the canonical URL that all clients MUST use to refer to dex. If a
    # path is provided, dex's HTTP service will listen at a non-root URL.
    issuer: {{ dex_issuer_url }}
    oauth2:
      skipApprovalScreen: true
    # The storage configuration determines where dex stores its state.
    storage:
      type: kubernetes
      config:
        inCluster: true
    frontend:
      theme: {{ dex_web_theme | default("coreos") }}
      logoURL: {{ dex_logo_url | default("static/img/oidc-icon.svg") }}
      issuer: {{ dex_web_issuer_name | default("DEX") }}
    # Configuration for the HTTPS endpoints.
    web:
{% if dex_issuer_url.startswith('https://') %}
      https: 0.0.0.0:5556
      tlsCert: /etc/dex/tls/tls.crt
      tlsKey: /etc/dex/tls/tls.key
{% else %}
      http: 0.0.0.0:5556
{% endif %}
{% if dex_use_grpc | default(false) %}
    grpc:
      https: {{ dex_ip | default("0.0.0.0") | ipwrap }}:{{ dex_grpc_port | default("5557") }}
      tlsCert: {{ dex_grpc_conf_dir }}/tls.crt
      tlsKey: {{ dex_grpc_conf_dir }}/tls.key
      tlsClientCA: {{ dex_grpc_conf_dir }}/ca.crt
{% endif %}
    # Configuration for token expiration time durations.
    expiry:
      signingKeys: {{ dex_expiry_signing_keys | default("24h") }}
      idTokens: {{ dex_expiry_id_tokens | default("1h") }}
    # Options for controlling the logger.
    logger:
      level: {{ dex_logger_level | default("info") }}
      format: {{ dex_logger_format | default("text") }} # can also be "json"
{% if dex_static_passwords is defined and dex_static_passwords | length > 0 %}
    staticPasswords:
{% for password in dex_static_passwords %}
    - email: {{ password.email }}
      hash: {{ password.hash}}
      username: {{ password.username }}
      userID: {{ password.userID }}
{% endfor %}
{% endif %}
    # List of clients.
    # If this option isn't chosen clients may be added through the gRPC API.
    staticClients:
{% if kube_oidc_auth | default(false) %}
    - id: {{ oidc_client_id }}
      name: "Proxy"
      secret: {{ dashboard_oidc_client_secret }}
      redirectURIs:
      - https://{{ auth_client_ingress_host | ipwrap }}{{ auth_client_redirect_path }}
{% endif %}
{% if kube_oidc_auth | default(false) %}
{% endif %}
{% if dex_static_clients is defined and dex_static_clients | length > 0 %}
{% for client in dex_static_clients %}
    - id: {{ client.id }}
      name: {{ client.name}}
      secret: {{ client.secret }}
      redirectURIs:
{% for uri in client.redirect_uris %}
      - {{ uri }}
{% endfor %}
{% endfor %}
{% endif %}
    enablePasswordDB: {{ dex_enable_pwdb | default("false") }}

{% if dex_connectors is defined and dex_connectors | length > 0 %}
    connectors:
{% for dconnector in dex_connectors %}
{% if dconnector.type == 'ldap' %}
    - type: ldap
      id: {{ dconnector.id }}
      name: {{ dconnector.name }}
      config:
        # Host and optional port of the LDAP server in the form "host:port".
        # If the port is not supplied, it will be guessed based on "insecureNoSSL",
        # and "startTLS" flags. 389 for insecure or StartTLS connections, 636
        # otherwise.
        host: {{ dconnector.host }}

        # TLS for this setup.
        insecureNoSSL: {{ dconnector.insecure_no_ssl | default("false") }}

        # If a custom certificate isn't provide, this option can be used to turn on
        # TLS certificate checks. As noted, it is insecure and shouldn't be used outside
        # of explorative phases.
        #
        insecureSkipVerify: {{ dconnector.insecure_skip_verify | default ("false") }}

        # When connecting to the server, connect using the ldap:// protocol then issue
        # a StartTLS command. If unspecified, connections will use the ldaps:// protocol
        #
        startTLS: false

        # Path to a trusted root certificate file. Default: use the host's root CA.
        rootCA: {{ dconnector.root_ca | default("") }}

        # Base64 encoded PEM data containing root CAs.
        rootCAData: {{ dconnector.root_ca_data | default("") }}

        # The DN and password for an application service account. The connector uses
        # these credentials to search for users and groups. Not required if the LDAP
        # server provides access for anonymous auth.
        # Please note that if the bind password contains a `$`, it has to be saved in an
        # environment variable which should be given as the value to `bindPW`.
        bindDN: {{ dconnector.bind_dn }}
        bindPW: {{ dconnector.bind_pw }}

        # User search maps a username and password entered by a user to a LDAP entry.
        userSearch:
          # BaseDN to start the search from. It will translate to the query
          # "(&(objectClass=person)(uid=<username>))".
          baseDN: {{ dconnector.usersearch_base_dn }}
          # Optional filter to apply when searching the directory.
          filter: "{{ dconnector.usersearch_filter | default('(objectClass=person)')}}"

          # username attribute used for comparing user entries. This will be translated
          # and combined with the other filter as "(<attr>=<username>)".
          username: {{ dconnector.usersearch_username | default("cn") }}
          # The following three fields are direct mappings of attributes on the user entry.
          # String representation of the user.
          idAttr: {{ dconnector.usersearch_id_attr | default("cn") }}
          # Required. Attribute to map to Email.
          emailAttr: {{ dconnector.usersearch_email_attr | default("mail") }}
          # Maps to display name of users
          nameAttr: {{ dconnector.usersearch_name_attr | default("cn") }}

        # Group search queries for groups given a user entry.
        groupSearch:
          # BaseDN to start the search from. It will translate to the query
          # "(&(objectClass=group)(member=<user uid>))".
          baseDN: {{ dconnector.groupsearch_base_dn }}
          # Optional filter to apply when searching the directory.
          filter: "{{ dconnector.groupsearch_filter | default('(objectClass=groupOfNames)')}}"

          # Following two fields are used to match a user to a group. It adds an additional
          # requirement to the filter that an attribute in the group must match the user's
          # attribute value.
          userMatchers:
          - userAttr: {{ dconnector.groupsearch_user_attr | default("DN") }}
            groupAttr: {{ dconnector.groupsearch_group_attr | default("member") }}

          # Represents group name.
          nameAttr: {{ dconnector.groupsearch_name_attr | default("cn") }}
{% endif %}
{% if dconnector.type == 'oidc' %}
    - type: oidc
      id: {{ dconnector.id }}
      name: {{ dconnector.name }}
      config:
        issuer: {{ dconnector.issuer }}
        clientID: {{ dconnector.client_id }}
        clientSecret: {{ dconnector.client_secret }}
        redirectURI: {{ dconnector.redirect_uri }}
{% if dconnector.basic_auth_unsupported is defined %}
        basicAuthUnsupported: {{ dconnector.basic_auth_unsupported }}
{% endif %}
{% if dconnector.hosted_domains is defined and dconnector.hosted_domains | length > 0 %}
        hostedDomains:
{% for hdomain in connecter.hosted_domains %}
        - {{ hdomain }}
{% endfor %}
{% endif %}
{% endif %}
{% if dconnector.type == 'saml' %}
    - type: {{ dconnector.type }}
      id: {{ dconnector.id }}
      name: {{ dconnector.name }}
      config:
        ssoURL: {{ dconnector.sso_url }}
        ca: {{ dconnector.ca }}
        redirectURI: {{ dconnector.redirect_uri }}
        usernameAttr: {{ dconnector.username_attr }}
        emailAttr: {{ dconnector.email_attr }}
{% if dconnector.groups_attr is defined %}
        groupsAttr: {{ dconnector.groups_attr }}
{% endif %}
{% if dconnector.ca_data is defined %}
        caData: {{ dconnector.ca_data }}
{% endif %}
        insecureSkipSignatureValidation: {{ dconnector.insecure_skip_signature_validation | default("false") }}
{% if dconnector.entity_issuer is defined %}
        endtityIssuer: {{ dconnector.entity_issuer }}
{% endif %}
{% if dconnector.sso_issuer is defined %}
        ssoIssuer: {{ dconnector.sso_issuer }}
{% endif %}
{% if dconnector.groups_delim is defined %}
        groupsDelim: {{ dconnector.groups_delim }}
{% endif %}
{% if dconnector.name_id_policy_format is defined %}
        nameIDPolicyFormat: {{ dconnector.name_id_policy_format }}
{% endif %}
{% endif %}
{% endfor %}
{% endif %}

---
kind: Service
apiVersion: v1
metadata:
  name: dex
spec:
  selector:
    app: dex
  type: ClusterIP
  ports:
  - name: http
{% if dex_issuer_url.startswith('https://') %}
    port: 443
{%  else %}
    port: 80
{% endif %}
    targetPort: 5556
    protocol: TCP
