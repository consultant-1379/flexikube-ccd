apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-client
  namespace: kube-system

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: auth-client
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["auth-client-ca"]
    verbs: ["get", "update", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: auth-client
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: auth-client
subjects:
  - kind: ServiceAccount
    name: auth-client
    namespace: kube-system

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: auth-client
  name: auth-client
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-client
  template:
    metadata:
      labels:
        app: auth-client
    spec:
      serviceAccountName: auth-client
      priorityClassName: system-cluster-critical
      # hostAliases are optional, to help route traffic to Dex / OIDC
      hostAliases:
        - ip: {{ dex_service_ip }}
          hostnames:
            - {{ dex_ingress_host }}
      imagePullSecrets:
        - name: local-registry-secret
      containers:
        - name: auth-client
          image: {{ auth_client_image }}
{% if auth_client_cpu_req is defined and auth_client_mem_req is defined and auth_client_cpu_limit is defined and auth_client_mem_limit is defined %}
          resources:
            requests:
              cpu: {{ auth_client_cpu_req }}
              memory: {{ auth_client_mem_req }}
            limits:
              cpu: {{ auth_client_cpu_limit }}
              memory: {{ auth_client_mem_limit }}
{% endif %}
          command: ["/bin/sh"]
          args:
            - "-c"
            - "sleep 10; /kuberos {% if auth_client_scope is defined %}--scopes=\"{{ auth_client_scope }}\" {{ dex_issuer_url }}{% else %}{{ dex_issuer_url }}{% endif %} {{ oidc_client_id }} /etc/authclient/cfg/secret /etc/authclient/cfg/template"
          ports:
            - name: https
              containerPort: 10003
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
              - all
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10002
          volumeMounts:
            - name: config
              mountPath: /etc/authclient/cfg
            - name: tls
              mountPath: /etc/authclient/tls
            - name: ca
              mountPath: /etc/ssl/certs
      volumes:
        - name: config
          configMap:
            name: auth-client
            items:
              - key: template
                path: template
              - key: secret
                path: secret
        - name: tls
          secret:
            secretName: auth-client-tls
            items:
              - key: tls.key
                path: tls.key
              - key: tls.crt
                path: tls.crt
        - name: ca
          secret:
            secretName: auth-client-ca
            items:
              - key: ca.crt
                path: ca-certificates.crt

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: auth-client
data:
  template: |
    apiVersion: v1
    kind: Config
    current-context: {{ cluster_context }}
    clusters:
      - name: {{ cluster_context }}
        cluster:
          certificate-authority-data: ""
          server: {{ cluster_server_url }}
  secret: {{ dashboard_oidc_client_secret }}

---
# ------------------- Auth Client Service ------------------- #

kind: Service
apiVersion: v1
metadata:
  name: auth-client
spec:
  ports:
    - name: http
      port: 443
      targetPort: 10003
      protocol: TCP
  selector:
    app: auth-client
  type: ClusterIP

---
# ------------------- Auth-client Ingress ------------------- #

{% if auth_client_ingress_host is defined %}

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: auth-client
spec:
  ingressClassName: nginx
  rules:
    - host: {{ auth_client_ingress_host }}
      http:
        paths:
          - backend:
              service:
                name: auth-client
                port:
                  number: 443
            path: /
            pathType: ImplementationSpecific
  tls:
    - hosts:
        - {{auth_client_ingress_host}}
      secretName: auth-client-tls

{% endif %}
